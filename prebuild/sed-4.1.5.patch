--- sed-4.1.5/lib/regcomp.c.orig	Sat Oct 18 12:53:23 2008
+++ sed-4.1.5/lib/regcomp.c	Sat Oct 18 12:56:09 2008
@@ -558,7 +558,11 @@
 static const bitset_t utf8_sb_map =
 {
   /* Set the first 128 bits.  */
-  [0 ... 0x80 / BITSET_WORD_BITS - 1] = BITSET_WORD_MAX
+//  [0 ... 0x80 / BITSET_WORD_BITS - 1] = BITSET_WORD_MAX
+//
+// Sun's cc can't handle this syntax.
+// assume 32 bit words
+  0xffff, 0xffff, 0xffff, 0xffff,
 };
 #endif
 
--- sed-4.1.5/lib/regexec.c.orig	Sat Oct 18 13:02:59 2008
+++ sed-4.1.5/lib/regexec.c	Sat Oct 18 13:00:00 2008
@@ -2894,7 +2894,9 @@
 	      sizeof (re_dfastate_t *) * (path->alloc - old_alloc));
     }
 
-  str_idx = path->next_idx ?: top_str;
+//  str_idx = path->next_idx ?: top_str;
+// Sun's cc can't handle this syntax
+  str_idx = path->next_idx ? 0 : top_str;
 
 
   /* Temporary modify MCTX.  */
@@ -3297,8 +3299,10 @@
   reg_errcode_t err;
   int i, j, ch, need_word_trtable = 0;
   bitset_word_t elem, mask;
-  bool dests_node_malloced = false;
-  bool dest_states_malloced = false;
+//  bool dests_node_malloced = false;
+//  bool dest_states_malloced = false;
+  int dests_node_malloced = 0;
+  int dest_states_malloced = 0;
   int ndests; /* Number of the destination states from `state'.  */
   re_dfastate_t **trtable;
   re_dfastate_t **dest_states = NULL, **dest_states_word, **dest_states_nl;
@@ -3323,7 +3327,8 @@
       dests_alloc = re_malloc (struct dests_alloc, 1);
       if (BE (dests_alloc == NULL, 0))
 	return 0;
-      dests_node_malloced = true;
+//      dests_node_malloced = true;
+      dests_node_malloced = 1;
     }
   dests_node = dests_alloc->dests_node;
   dests_ch = dests_alloc->dests_ch;
@@ -3372,7 +3377,8 @@
 	    free (dests_alloc);
 	  return 0;
 	}
-      dest_states_malloced = true;
+//      dest_states_malloced = true;
+      dest_states_malloced = 1;
     }
   dest_states_word = dest_states + ndests;
   dest_states_nl = dest_states_word + ndests;
@@ -3577,7 +3583,8 @@
 	{
 	  if (constraint & NEXT_NEWLINE_CONSTRAINT)
 	    {
-	      bool accepts_newline = bitset_contain (accepts, NEWLINE_CHAR);
+//	      bool accepts_newline = bitset_contain (accepts, NEWLINE_CHAR);
+	      int accepts_newline = bitset_contain (accepts, NEWLINE_CHAR);
 	      bitset_empty (accepts);
 	      if (accepts_newline)
 		bitset_set (accepts, NEWLINE_CHAR);
