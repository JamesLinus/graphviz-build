# $Id$ $Revision$

#################################################

if {[string length $own]} {
	set own_ [set own]_
} {
	set own_ ""
}

set graphviz_host www.graphviz.org
set graphviz_path /data/[set own_]pub/graphviz
set redhat_release /etc/redhat-release

################################################build_host
set start_time [clock format [clock seconds]]

if {[catch {exec hostname} build_host]} {
	set build_host [exec uname -n]
}
set work $env(HOME)/tmp/gviz/$build_host
set rpmbuild $env(HOME)/rpmbuild/$build_host
file mkdir $work $rpmbuild/BUILD $rpmbuild/SPECS $rpmbuild/RPMS $rpmbuild/SRPMS

set source_dir CURRENT
if {$argc} {
   set source_dir [lindex $argv 0]
}
if {[string equal $source_dir CURRENT]} {
    set path $graphviz_path/development
} {
    set path $graphviz_path/stable
}

# determine build platform arch
set arch $tcl_platform(machine)
#for i686 use canonical i386
if {[string equal $arch i686]} {set arch i386}

proc getfile {host path fn} { exec scp $host:/$path/$fn . }
proc putfile {host path fn} { exec scp $fn $host:/$path/ }
proc getindex {host path} { exec ssh $host ls $path }

set patterns {
	"Fedora release (\[0-9\]+).*(Rawhide)" ".fc" 0 fedora
	"Fedora release (\[0-9\]+)" ".fc"  0 fedora
	"Fedora Core release (\[0-9\]+)" ".fc" 0 fedora
	"CentOS release (\[0-9\]+)" ".el" 0 rhel
	"Red Hat Enterprise Linux Server release (\[0-9\]+)" ".el" 0 rhel
	"Red Hat Enterprise Linux ES release (\[0-9\]+)" ".el" 0 rhel
	"Red Hat Enterprise Linux AS release (\[0-9\]+)" ".el" 0 rhel
	"Red Hat Enterprise Linux Workstation release (\[0-9\]+)" ".el" 0 rhel
	"Red Hat Enterprise Linux release (\[0-9\]+)" ".el" 0 rhel
	"Red Hat Linux release (\[0-9\]+)" ".rhl" 0 rhl
}

# as far as I can tell, rpmbuild --macros doesn't work,
# so we must explicitly set %fedora and %dist and 
# pass them on the rpmbuild command line, to run in an environment
# where ~/.rpmmacros may be shared (e.g. virtual hosts).
proc rpmbuildargs {release own_} {
	global rtest vers os dist patterns;
	if {! [file readable $release]} {
		puts stderr "cannot read $release, giving up.";
		exit
	}
	set f [open $release r]
	set line [read $f]
	set rc 0
	foreach {pat osprefix offset os} $patterns {
		set rc [regexp $pat $line . vers]
		if {$rc} {
			set os $own_$os
			set vers [expr ($vers + $offset)]
			set dist $osprefix$vers
			break
		}
	}
	if {! $rc} {
		puts stderr "can't determine OS release from $release";
		exit
	}
	close $f
	set rv [concat --define \"dist $dist\" --define \"$os $vers\" --define \"rtest $rtest\"]
	return $rv
}

